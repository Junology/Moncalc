/-
Copyright (c) 2022 Jun Yoshida. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
-/

import Mathlib.CategoryTheory.Category.Basic
import Mathlib.CategoryTheory.Functor.Basic
import Mathlib.CategoryTheory.Functor.Category

import Moncalc.Data.DVect2.Defs
import Moncalc.Data.DVect2.Basic

/-!
# Category structure on `List`

We show that `List Œ±` admits a canonical structure of a category provided `Category Œ±`
-/

namespace CategoryTheory.List

universe u v


/-!
## Definition of the structure
-/
section Category

variable {Œ± : Type u} [Category Œ±]

/--
`Hom [a‚ÇÅ,a‚ÇÇ, ..., a‚Çò] [b‚ÇÅ,b‚ÇÇ, ..., b‚Çô]` is defined so that
  - if `m=n`, then it is isomorphic to `Hom a‚ÇÅ b‚ÇÅ √ó Hom a‚ÇÇ b‚ÇÇ √ó ‚ãØ √ó Hom a‚Çò b‚Çô`;
  - otherwise, it is the empty type.
 -/
 @[reducible]
def Hom : List Œ± ‚Üí List Œ± ‚Üí Type _ :=
  DVect2 Quiver.Hom

protected
def id : (as : List Œ±) ‚Üí Hom as as :=
  DVect2.fromList (Œ≥:=Quiver.Hom) CategoryStruct.id

--- Due to `Mathlib4` convention, `comp f g` applies `f` "before" `g`.
protected
def comp : {as bs cs : List Œ±} ‚Üí Hom as bs ‚Üí Hom bs cs ‚Üí Hom as cs
| [], [], [], DVect2.nil, DVect2.nil => DVect2.nil
| (_::_), (_::_), (_::_), DVect2.cons f fs, DVect2.cons g gs => DVect2.cons (f ‚â´ g) (List.comp fs gs)

/-!
### Lemmas for recursion
-/
@[simp]
protected
theorem id_nil' : List.id (Œ±:=Œ±) [] = DVect2.nil := rfl

@[simp]
protected
theorem id_cons' : ‚àÄ {a : Œ±} {as : List Œ±}, List.id (a::as) = DVect2.cons (ùüô a) (List.id as) := rfl

@[simp]
protected
theorem comp_nil' : List.comp (Œ±:=Œ±) DVect2.nil DVect2.nil = DVect2.nil := rfl

@[simp]
protected
theorem comp_cons' : ‚àÄ {a b c : Œ±} {as bs cs : List Œ±} {f : Quiver.Hom a b} {fs : Hom as bs} {g : Quiver.Hom b c} {gs : Hom bs cs}, List.comp (DVect2.cons f fs) (DVect2.cons g gs) = DVect2.cons (f ‚â´ g) (List.comp fs gs) := by
  intros; rfl

--- Right unitality of the composition in `List Œ±`; see the comment on `comp` function for the composition order.
protected
theorem id_comp : ‚àÄ {as bs : List Œ±} (fs : Hom as bs), List.comp (List.id as) fs = fs
| [], [], DVect2.nil => rfl
| (_::_), (_::_), DVect2.cons f fs => by
  dsimp
  rw [Category.id_comp, List.id_comp fs]

-- The left unitality of the composition in `List Œ±`; see the comments on `comp` function for the composition order.
protected
theorem comp_id : ‚àÄ {as bs : List Œ±} (fs : Hom as bs), List.comp fs (List.id bs) = fs
| [], [], DVect2.nil => rfl
| (_::_), (_::_), DVect2.cons f fs => by
  dsimp
  rw [Category.comp_id, List.comp_id fs]

-- The associativity of the composition in `List Œ±`.
protected
theorem assoc : ‚àÄ {as bs cs ds : List Œ±} (fs : Hom as bs) (gs : Hom bs cs) (hs : Hom cs ds), List.comp (List.comp fs gs) hs = List.comp fs (List.comp gs hs)
| [], [], [], [], DVect2.nil, DVect2.nil, DVect2.nil => rfl
| (_::_), (_::_), (_::_), (_::_), DVect2.cons f fs, DVect2.cons g gs, DVect2.cons h hs => by
  dsimp
  rw [Category.assoc, List.assoc fs gs hs]

-- `List Œ±` is a `Category` provided `Œ±` is.
instance instCategoryList : CategoryTheory.Category (List Œ±) where
  Hom := Hom
  id := List.id
  comp := List.comp
  id_comp := List.id_comp
  comp_id := List.comp_id
  assoc := List.assoc


/-!
### Lemmas for recursion that do not destruct the `CategoryTheory` notations
-/

@[simp]
theorem id_nil : ùüô (List.nil (Œ±:=Œ±)) = DVect2.nil := rfl

@[simp]
theorem id_cons : ‚àÄ {a : Œ±} {as : List Œ±}, ùüô (a::as) = DVect2.cons (ùüô a) (ùüô as) := rfl

attribute [reducible] List.Hom

@[simp]
theorem comp_nil : CategoryStruct.comp (obj:=List Œ±) (X:=[]) (Y:=[]) (Z:=[]) DVect2.nil DVect2.nil = DVect2.nil := rfl

@[simp]
theorem comp_cons : ‚àÄ {a b c : Œ±} {as bs cs : List Œ±} {f : a ‚ü∂ b} {fs : as ‚ü∂ bs} {g : b ‚ü∂ c} {gs : bs ‚ü∂ cs}, CategoryStruct.comp (obj:=List Œ±) (X:=a::as) (Y:=b::bs) (Z:=c::cs) (DVect2.cons f fs) (DVect2.cons g gs) = DVect2.cons (f ‚â´ g) (fs ‚â´ gs) := rfl

--- Functional extensionality for functors into `List Œ±`
theorem eqF_List {Œ≤ : Type v} [Category Œ≤] : (F G : Functor Œ± (List Œ≤)) ‚Üí (‚àÄ (a : Œ±), F.obj a = G.obj a) ‚Üí (‚àÄ (a‚ÇÅ a‚ÇÇ : Œ±) (f : a‚ÇÅ ‚ü∂ a‚ÇÇ), DVect2.Eq (F.map f) (G.map f)) ‚Üí F = G
| Functor.mk F _ _, Functor.mk G _ _ => by
  cases F with | mk F_obj F_map =>
  cases G with | mk G_obj G_map =>
  intro hobj
  have : F_obj = G_obj := funext hobj
  cases this
  dsimp
  intro hmap
  have : @F_map = @G_map := by
    apply funext; intro a; apply funext; intro b
    apply funext
    intro f
    exact (hmap a b f).eq_of
  cases this
  rfl

end Category


/-!
## Basic list operations as functors

One can obtain a functor from an operation on `List` together with its counterpart on `DVect2`.
-/

/-!
### Functorial `map`
-/

def mapF {Œ± : Type u} [Category Œ±] {Œ≤ : Type v} [Category Œ≤] : Functor Œ± Œ≤ ‚•§ Functor (List Œ±) (List Œ≤) where
  obj := Œª F => {
    obj := List.map F.obj
    map := DVect2.map F.obj F.obj F.map
    map_id := by
      intro as
      induction as
      case nil => rfl
      case cons a as h_ind =>
        dsimp [DVect2.map] at *
        rw [h_ind, F.map_id]
    map_comp :=
      let rec map_comp_aux : ‚àÄ {as bs cs : List Œ±} (fs : Hom as bs) (gs : Hom bs cs), List.comp (DVect2.map F.obj F.obj F.map fs) (DVect2.map F.obj F.obj F.map gs) = DVect2.map F.obj F.obj F.map (List.comp fs gs)
      | [], [], [], DVect2.nil, DVect2.nil => rfl
      | (_::_), (_::_), (_::_), DVect2.cons f fs, DVect2.cons g gs => by
        dsimp [DVect2.map, List.comp]
        rw [F.map_comp, map_comp_aux fs gs]
      by
        intro fs gs
        simp [CategoryStruct.comp]
        rw [map_comp_aux]
  }
  map := @Œª F G œÜ => {
    app := DVect2.dfromList F.obj G.obj œÜ.app
    naturality := by
      intros as bs fs
      dsimp [CategoryStruct.comp]
      induction fs <;> dsimp [DVect2.map, List.comp]
      /- case nil has been completed -/
      case cons f fs h_ind =>
        rw [œÜ.naturality]
        apply congrArg
        exact h_ind
  }
  map_id := Œª F => by
    ext as; dsimp
    induction as
    case nil => rfl
    case cons a as h_ind =>
      dsimp [DVect2.dfromList]
      rw [h_ind]
  map_comp := by
    intro F G H œÜ œà
    ext as; dsimp
    induction as
    case nil => rfl
    case cons a as h_ind =>
      dsimp [DVect2.dfromList]
      rw [h_ind]

namespace mapF

@[simp]
theorem obj_obj_cons {Œ± : Type u} [Category Œ±] {Œ≤ : Type v} [Category Œ≤] {F : Functor Œ± Œ≤} : ‚àÄ {a : Œ±} {as : List Œ±}, (mapF.obj F).obj (a::as) = F.obj a :: (mapF.obj F).obj as := rfl

@[simp]
theorem obj_map_cons {Œ± : Type u} [Category Œ±] {Œ≤ : Type v} [Category Œ≤] {F : Functor Œ± Œ≤} : ‚àÄ {a b : Œ±} {as bs : List Œ±} {f : a ‚ü∂ b} {fs : as ‚ü∂ bs}, (mapF.obj F).map (DVect2.cons f fs) = DVect2.cons (F.map f) ((mapF.obj F).map fs) := rfl

@[simp]
theorem map_cons {Œ± : Type u} [Category Œ±] {Œ≤ : Type v} [Category Œ≤] {F G : Functor Œ± Œ≤} {œÜ : F ‚ü∂ G} : ‚àÄ {a : Œ±} {as : List Œ±}, (mapF.map œÜ).app (a::as) = DVect2.cons (œÜ.app a) ((mapF.map œÜ).app as) := rfl

--- `mapF : Functor Œ± Œ± ‚ü∂ Functor (List Œ±) (List Œ±)` preserves the identity functor
@[simp]
protected
theorem obj_id {Œ± : Type u} [Category Œ±] : mapF.obj (ùü≠ Œ±) = ùü≠ (List Œ±) := by
  apply eqF_List <;> dsimp [Functor.id]
  . intro as
    change List.map id as = as
    rw [List.map_id]
  . intro as‚ÇÅ as‚ÇÇ fs
    change DVect2.Eq (DVect2.map id id id fs) fs
    exact DVect2.map_id

--- `mapF : Functor Œ± Œ≤ ‚ü∂ Functor (List Œ±) (List Œ≤)` respects functor composition
@[simp]
protected
theorem obj_comp {Œ± : Type u} [Category Œ±] {Œ≤ : Type v} [Category Œ≤] {Œ≥ : Type w} [Category Œ≥] (F : Functor Œ± Œ≤) (G : Functor Œ≤ Œ≥) : mapF.obj (F ‚ãô G) = mapF.obj F ‚ãô mapF.obj G := by
  dsimp [Functor.comp, mapF]
  apply eqF_List <;> dsimp
  . intro as
    rw [‚ÜêList.map_comp G.obj F.obj]
    rfl
  . intro as‚ÇÅ as‚ÇÇ fs
    exact DVect2.map_comp

end mapF


/-!
### Functorial `append`
-/
namespace appendF

/--
  `DVect2.append` enables `Hom as‚ÇÅ bs‚ÇÅ ‚Üí Hom as‚ÇÇ bs‚ÇÇ ‚Üí Hom (as‚ÇÅ++as‚ÇÇ) (bs‚ÇÅ++bs‚ÇÇ)` for `as‚ÇÅ as‚ÇÇ bs‚ÇÅ bs‚ÇÇ : List Œ±`. 
-/
instance instHAppendHom (Œ± : Type u) [Category Œ±] {as‚ÇÅ as‚ÇÇ bs‚ÇÅ bs‚ÇÇ : List Œ±} : HAppend (as‚ÇÅ ‚ü∂ bs‚ÇÅ) (as‚ÇÇ ‚ü∂ bs‚ÇÇ) ((as‚ÇÅ++as‚ÇÇ) ‚ü∂ (bs‚ÇÅ++bs‚ÇÇ)) :=
  inferInstanceAs $ HAppend (DVect2 (Quiver.Hom (V:=Œ±)) as‚ÇÅ bs‚ÇÅ) (DVect2 (Quiver.Hom (V:=Œ±)) as‚ÇÇ bs‚ÇÇ) _

variable {Œ± : Type u} [Category Œ±]

@[simp]
protected
lemma map_cons {a b : Œ±} {as‚ÇÅ as‚ÇÇ bs‚ÇÅ bs‚ÇÇ : List Œ±} (f : a ‚ü∂ b) (fs‚ÇÅ : as‚ÇÅ ‚ü∂ bs‚ÇÅ) (fs‚ÇÇ : as‚ÇÇ ‚ü∂ bs‚ÇÇ) : HAppend.hAppend (Œ±:=(a::as‚ÇÅ) ‚ü∂ (b::bs‚ÇÅ)) (DVect2.cons f fs‚ÇÅ) fs‚ÇÇ = DVect2.cons f (fs‚ÇÅ ++ fs‚ÇÇ) := rfl

@[simp]
protected
theorem map_id {as bs : List Œ±} : ùüô as ++ ùüô bs = ùüô (as++bs) := by
  induction as
  case nil => rfl
  case cons a as h_ind =>
    dsimp
    rw [DVect2.cons_append, h_ind]

@[simp]
protected
theorem map_comp : ‚àÄ {as‚ÇÅ as‚ÇÇ bs‚ÇÅ bs‚ÇÇ cs‚ÇÅ cs‚ÇÇ : List Œ±} (fs‚ÇÅ : Hom as‚ÇÅ bs‚ÇÅ) (fs‚ÇÇ : Hom as‚ÇÇ bs‚ÇÇ) (gs‚ÇÅ : Hom bs‚ÇÅ cs‚ÇÅ) (gs‚ÇÇ : Hom bs‚ÇÇ cs‚ÇÇ), (fs‚ÇÅ ++ fs‚ÇÇ) ‚â´ (gs‚ÇÅ ++ gs‚ÇÇ) = HAppend.hAppend (self:=instHAppendHom Œ±) (fs‚ÇÅ ‚â´ gs‚ÇÅ) (fs‚ÇÇ ‚â´ gs‚ÇÇ)
| [], _, [], _, [], _, DVect2.nil, _, DVect2.nil, _ => rfl
| (_::_), _, (_::_), _, (_::_), _, DVect2.cons f fs‚ÇÅ, fs‚ÇÇ, DVect2.cons g gs‚ÇÅ, gs‚ÇÇ => by
  rw [DVect2.cons_append, DVect2.cons_append]
  dsimp
  rw [appendF.map_comp fs‚ÇÅ _ gs‚ÇÅ _, DVect2.cons_append]

end appendF


/-!
## Functorial join
-/

--- The functor `List (List Œ±) ‚•§ List Œ±` consisting of `List.join` on objects and `DVect2.join` on morhisms.
def joinF {Œ± : Type u} [Category Œ±] : Functor (List (List Œ±)) (List Œ±) where
  obj := List.join
  map := DVect2.join
  map_id := by
    intro ass
    simp [CategoryStruct.id]
    induction ass
    case nil => rfl
    case cons as ass h_ind =>
      dsimp [List.id, List.join, DVect2.join] at *
      rw [DVect2.fromList_append, h_ind]
      rfl
  map_comp :=
    let rec map_comp_aux {Œ± : Type u} [Category Œ±] : ‚àÄ {ass bss css : List (List Œ±)} (fss : ass ‚ü∂ bss) (gss : bss ‚ü∂ css), Eq (Œ±:=ass.join ‚ü∂ css.join) (DVect2.join (fss ‚â´ gss)) (fss.join ‚â´ gss.join)
    | [], [], [], DVect2.nil, DVect2.nil => rfl
    | (_::_), (_::_), (_::_), DVect2.cons _ fss, DVect2.cons _ gss => by
      dsimp [DVect2.join]
      rw [map_comp_aux fss gss, appendF.map_comp]
    map_comp_aux

namespace joinF

@[simp]
protected
theorem obj_cons {Œ± : Type u} [Category Œ±] : ‚àÄ {as : List Œ±} {ass : List (List Œ±)}, (joinF (Œ±:=Œ±)).obj (as::ass) = as ++ (joinF (Œ±:=Œ±)).obj ass := rfl

@[simp]
protected
theorem map_cons {Œ± : Type u} [Category Œ±] : ‚àÄ {as bs : List Œ±} {ass bss : List (List Œ±)} {fs : as ‚ü∂ bs} {fss : ass ‚ü∂ bss}, (joinF (Œ±:=Œ±)).map (DVect2.cons fs fss) = HAppend.hAppend (Œ±:=DVect2 (Quiver.Hom (V:=Œ±)) as bs) (Œ≤:=DVect2 (Quiver.Hom (V:=Œ±)) ass.join bss.join) fs ((joinF (Œ±:=Œ±)).map fss) := rfl

end joinF


end CategoryTheory.List