/-
Copyright (c) 2022 Jun Yoshida. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
-/

import Mathlib.CategoryTheory.Category.Basic
import Mathlib.CategoryTheory.Functor.Basic
import Mathlib.CategoryTheory.Functor.Category
import Mathlib.CategoryTheory.NatTrans

import Moncalc.Data.DVect2.Basic
import Moncalc.CategoryTheory.List.Basic

namespace CategoryTheory.List

universe u v w

/-
  2-monad structure on `List` as an endo-functor on Cat
-/

section

--- Auxiliary lemma that for every functor `F : Œ± ‚•§ Œ≤`, the construction `DVect2.map F.obj F.obj F.map : Hom as‚ÇÅ as‚ÇÇ ‚Üí Hom (map F.obj as‚ÇÅ) (map F.obj as‚ÇÇ)` preserves the composition `List.comp`.
private
theorem mapF_comp {Œ± : Type u} [Category Œ±] {Œ≤ : Type v} [Category Œ≤] (Œ¶ : CategoryTheory.Functor Œ± Œ≤) : ‚àÄ {as bs cs : List Œ±} (fs : Hom as bs) (gs : Hom bs cs), List.comp (DVect2.map Œ¶.obj Œ¶.obj Œ¶.map fs) (DVect2.map Œ¶.obj Œ¶.obj Œ¶.map gs) = DVect2.map Œ¶.obj Œ¶.obj Œ¶.map (List.comp fs gs)
| [], [], [], DVect2.nil, DVect2.nil => rfl
| (_::_), (_::_), (_::_), DVect2.cons f fs, DVect2.cons g gs => by
  dsimp [DVect2.map, List.comp]
  rw [Œ¶.map_comp, mapF_comp Œ¶ fs gs]

--- for a given functor `F : Œ± ‚•§ Œ≤`, `mapF F : List Œ± ‚•§ List Œ≤` is the functor consisting of `map F.obj` on objects and `DVect2 F.obj F.obj F.map` on morphisms.
def mapF {Œ± : Type u} {Œ≤ : Type v} [Category Œ±] [Category Œ≤] (Œ¶ : CategoryTheory.Functor Œ± Œ≤) : CategoryTheory.Functor (List Œ±) (List Œ≤) where
  obj := List.map Œ¶.obj
  map := DVect2.map Œ¶.obj Œ¶.obj Œ¶.map
  map_id := by
    intro as
    simp [CategoryStruct.id]
    induction as
    case nil => rfl
    case cons a as h_ind =>
      dsimp [List.id, DVect2.map, DVect2.fromList]
      rw [h_ind, Œ¶.map_id]
  map_comp := by
    intro as bs cs fs gs
    simp [CategoryStruct.comp]
    rw [mapF_comp]

end

--- `mapF : Functor Œ± Œ≤ ‚Üí Functor (List Œ±) (List Œ≤)` extendsto a functor between the functor categories
def mapNT {Œ± : Type u} {Œ≤ : Type v} [Category Œ±] [Category Œ≤] {F G : Œ± ‚•§ Œ≤} (œÜ : NatTrans F G) : NatTrans (mapF F) (mapF G) where
  app := DVect2.dfromList F.obj G.obj œÜ.app
  naturality := by
    intros as bs fs
    dsimp [CategoryStruct.comp,List.mapF]
    induction fs <;> dsimp [DVect2.map, List.comp]
    /- case nil has been completed -/
    case cons f fs h_ind =>
      rw [œÜ.naturality]
      apply congrArg
      exact h_ind

--- The functor `List (List Œ±) ‚•§ List Œ±` consisting of `List.join` on objects and `DVect2.join` on morhisms.
def joinF {Œ± : Type u} [Category Œ±] : CategoryTheory.Functor (List (List Œ±)) (List Œ±) where
  obj := List.join
  map := DVect2.join
  map_id := by
    intro ass
    simp [CategoryStruct.id]
    induction ass
    case nil => rfl
    case cons as ass h_ind =>
      dsimp [List.id, List.join, DVect2.join]
      rw [DVect2.fromList_append, h_ind]
      rfl
  map_comp := by
    intro ass bss css fss gss
    simp [CategoryStruct.comp]
    rw [comp_join]

--- The functorial embedding of `Œ±` into `List Œ±`.
def singletonF {Œ± : Type u} [Category Œ±] : CategoryTheory.Functor Œ± (List Œ±) where
  obj := Œª a => [a]
  map := Œª f => DVect2.cons f DVect2.nil


/-
  2-functoriality and 2-monad laws
-/

-- Functional extensionality for functors into `List Œ±`
theorem eqF_List {Œ± : Type u} [Category Œ±] {Œ≤ : Type v} [Category Œ≤] : (F G : Functor Œ± (List Œ≤)) ‚Üí (‚àÄ (a : Œ±), F.obj a = G.obj a) ‚Üí (‚àÄ (a‚ÇÅ a‚ÇÇ : Œ±) (f : a‚ÇÅ ‚ü∂ a‚ÇÇ), DVect2.Eq (F.map f) (G.map f)) ‚Üí F = G
| Functor.mk F _ _, Functor.mk G _ _ => by
  cases F with | mk F_obj F_map =>
  cases G with | mk G_obj G_map =>
  intro hobj
  have : F_obj = G_obj := funext hobj
  cases this
  dsimp
  intro hmap
  have : @F_map = @G_map := by
    apply funext; intro a; apply funext; intro b
    apply funext
    intro f
    exact (hmap a b f).eq_of
  cases this
  rfl

--- `mapF : Functor Œ± Œ≤ ‚Üí Functor (List Œ±) (List Œ≤)` respects functor composition
theorem mapF_Fcomp {Œ± : Type u} [Category Œ±] {Œ≤ : Type v} [Category Œ≤] {Œ≥ : Type w} [Category Œ≥] (F : Functor Œ± Œ≤) (G : Functor Œ≤ Œ≥) : mapF (F ‚ãô G) = mapF F ‚ãô mapF G := by
  dsimp [Functor.comp, mapF]
  apply eqF_List <;> dsimp
  . intro as
    rw [‚ÜêList.map_comp G.obj F.obj]
    rfl
  . intro as‚ÇÅ as‚ÇÇ fs
    exact DVect2.map_comp

--- `mapF : Functor Œ± Œ± ‚Üí Functor (List Œ±) (List Œ±)` preserves the identity functor
theorem mapF_id {Œ± : Type u} [Category Œ±] : mapF (ùü≠ Œ±) = ùü≠ (List Œ±) := by
  apply eqF_List <;> dsimp [Functor.id]
  . intro as
    change List.map id as = as
    rw [List.map_id]
  . intro as‚ÇÅ as‚ÇÇ fs
    change DVect2.Eq (DVect2.map id id id fs) fs
    exact DVect2.map_id

--- `mapNT : NatTrans F F ‚Üí NatTrans (mapF F) (mapF F)` preserves the identity natural transformation
theorem mapNT_id {Œ± : Type u} [Category Œ±] {Œ≤ : Type v} [Category Œ≤] (F : Functor Œ± Œ≤) : mapNT (NatTrans.id F) = NatTrans.id (mapF F) := by
  simp [mapNT, NatTrans.id]
  apply funext; intro as
  induction as
  case nil => rfl
  case cons a as h_ind =>
    dsimp [DVect2.dfromList]
    rw [h_ind]
    rfl

--- `mapNT : NatTrans F G ‚Üí NatTrans (mapF F) (mapF G)` preserves the vertical composition
theorem mapNT_vcomp {Œ± : Type u} [Category Œ±] {Œ≤ : Type v} [Category Œ≤] {F G H : Functor Œ± Œ≤} (œÜ : NatTrans F G) (œà : NatTrans G H) : mapNT (NatTrans.vcomp œÜ œà) = NatTrans.vcomp (mapNT œÜ) (mapNT œà) := by
  simp [NatTrans.vcomp, mapNT, List.comp]
  apply funext
  intro as
  induction as
  case nil => rfl
  case cons a as h_ind =>
    dsimp [DVect2.dfromList]
    rw [h_ind]
    rfl

/--
  TODO: state and prove `mapNT_hcomp`.
  As our "associator" `mapF_Fcomp : mapF (F ‚ãô G) = mapF F ‚ãô mapF G` is only a propositional equality, not the definitional one, we need some tricks even to state it.
-/

theorem whisker_singletonF {Œ± : Type u} [Category Œ±] {Œ≤ :Type v} [Category Œ≤] (F : Functor Œ± Œ≤) : F ‚ãô singletonF = singletonF ‚ãô mapF F := rfl

--- Left unitality of `List` with respect to `joinF` as multiplication and `singletonF` as unit.
theorem joinF_singletonF_left {Œ± : Type u} [Category Œ±] : singletonF (Œ±:=List Œ±) ‚ãô joinF = Functor.id (List Œ±) := by
  dsimp [Functor.comp, Functor.id]
  dsimp [singletonF, joinF, DVect2.join]
  apply eqF_List
  . intro as
    dsimp
    exact List.append_nil as
  . intro as bs fs
    dsimp
    exact DVect2.append_nil _

--- Right unitality of `List` with respect to `joinF` as multiplication and `singletonF` as unit.
theorem joinF_singletonF_right {Œ± : Type u} [Category Œ±] : mapF singletonF ‚ãô joinF = Functor.id (List Œ±) := by
  dsimp [Functor.comp, Functor.id]
  dsimp [singletonF, joinF, mapF, DVect2.join]
  apply eqF_List <;> dsimp
  . intro as
    induction as
    case a.nil => rfl
    case a.cons a as h_ind => dsimp; rw [h_ind]
  . intro as bs fs
    induction fs
    case a.nil =>
      dsimp [DVect2.map, DVect2.join]
      exact DVect2.Eq.of rfl
    case a.cons a as b bs f fs h_ind =>
      dsimp [DVect2.map, DVect2.join]
      rw [DVect2.cons_append, DVect2.nil_append]
      exact DVect2.Eq.descend rfl h_ind

--- Two different ways to flatten `List (List (List Œ±))` with the `joinF` functor result in (strictly) the same.
theorem joinF_assoc {Œ± : Type u} [Category Œ±] : joinF (Œ±:=List Œ±) ‚ãô joinF = mapF joinF ‚ãô joinF := by
  dsimp [Functor.comp, joinF, mapF]
  apply eqF_List <;> dsimp
  . intros; exact List.join_join _
  . intros; exact DVect2.join_join _

--- `joinF` is a 2-natural transformation
theorem comp_joinF_mapF {Œ± : Type u} [Category Œ±] {Œ≤ : Type v} [Category Œ≤] (F : Functor Œ± Œ≤) : joinF ‚ãô mapF F = mapF (mapF F) ‚ãô joinF := by
  dsimp [Functor.comp, joinF, mapF]
  apply eqF_List <;> dsimp
  . intro ass
    rw [List.map_join]
  . intros ass‚ÇÅ ass‚ÇÇ fss
    induction fss
    case a.nil => exact DVect2.Eq.nil_rfl
    case a.cons fs fss h_ind =>
      dsimp [DVect2.join, DVect2.map]
      apply DVect2.Eq.trans (DVect2.map_append _ _ _)
      apply DVect2.eq_of_eq_append_eq (DVect2.Eq.of rfl)
      exact h_ind

end CategoryTheory.List
